Exp 01:
input:
    overlap 0
    rawData-2500-1250-0.004-12N03.npy
    resameled 0.5
    n01-norm
    scale , auto: [7.04761077]
    ->
    exp01-0.05-12s-N03.npy
setup:
    run = 'R1'
    outFileName = f'exp01-{run}'
    functionData = {'run':run,
                    'preProcessor':preProcessor,
                    'satelliteSim':satelliteSim,
                    'inputOutputSize':inputOutputSize,
                    'nTest':1000}
    parameters={'nHidden': [1,2,3],
                'layerSize':list(np.round(np.array((0.5,1,2,4,10)) * 98)),
                'nTraining': [500,1000,1500,2000,2500,3000]}
    nntc.TrainModel(maxEpochs=1e3,
                lossLogInterval=10,
                testEvaluationInterval=10,
                learningRate=0.001,)
####
####
R2 slower learning rate:
    run = 'R2'
    outFileName = f'exp01-{run}'
    functionData = {'run':run,
                    'preProcessor':preProcessor,
                    'satelliteSim':satelliteSim,
                    'inputOutputSize':inputOutputSize,
                    'nTest':1000}
    parameters={'nHidden': [1,2,3],
                'layerSize':list(np.round(np.array((0.5,1,2,4,10)) * 98)),
                'nTraining': [500,1000,1500,2000,2500,3000]}
    nntc.TrainModel(maxEpochs=1e3,
                lossLogInterval=10,
                testEvaluationInterval=10,
                learningRate=0.001,)
R3 proper setup:
functionData = {'run':run,
                    'preProcessor':preProcessor,
                    'satelliteSim':satelliteSim,
                    'inputOutputSize':inputOutputSize,
                    'nTest':1000}
parameters={'nHidden': [1,2,3],
            'layerSize':list(np.round(np.array((0.5,0.75,1,1.25,1.5)) * 98 * 12)),
            'nTraining': [2000,3000,4000,5000]}
nntc.TrainModel(maxEpochs=1e3,
                    lossLogInterval=10,
                    testEvaluationInterval=10,
                    learningRate=0.0001,)
Exp 02 Z
input:
    overlap 0
    rawData-2500-1250-0.004-12N03.npy
    resameled 0.5
    n01-z
    scale , auto: array([8.64232908])
    ->
    exp02-Z-0.05-12s-N03.npy

    run='R1'
    outFileName = f'exp02-Z-{run}'
    functionData = {'run':run,
                    'preProcessor':preProcessor,
                    'satelliteSim':satelliteSim,
                    'inputOutputSize':inputOutputSize,
                    'nTest':1000}
parameters={'nHidden': [1,2,3],
            'layerSize':list(np.round(np.array((0.5,0.75,1,1.25,1.5)) * 98 * 12)),
            'nTraining': [2000,3000,4000,5000]}
nntc.TrainModel(maxEpochs=1e3,
                    lossLogInterval=10,
                    testEvaluationInterval=10,
                    learningRate=0.0001,)

Exp 02 3D
input:
    overlap 0
    rawData-2500-1250-0.004-12N03.npy
    resameled 0.5
    n01-norm
    scale , [9.3, 9.3, 9.3](recommended: array([9.20344873, 9.26599719, 8.64232908]))
    ->
    exp02-3D-0.05-12s-N03.npy
setup:
run = 'R1'
    outFileName = f'exp03-3D-{run}'
    functionData = {'run':run,
                    'preProcessor':preProcessor,
                    'satelliteSim':satelliteSim,
                    'inputOutputSize':inputOutputSize,
                    'nTest':1000}
parameters={'nHidden': [1,2,3],
            'layerSize':list(np.round(np.array((0.5,0.75,1,1.25,1.5)) * 98 * 12)),
            'nTraining': [2000,3000,4000,5000]}
nntc.TrainModel(maxEpochs=1e3,
                    lossLogInterval=10,
                    testEvaluationInterval=10,
                    learningRate=0.0001,)

Exp03:
input same as exp01 R1:
exp01-0.05-12s-N03.npy

setup:
naming:
trainingName = f'lr{int(1/learningRate*1000):02d}ls{layerSize:04d}nH{nHidden}tnt{nTraining:04d}'
run = 'R1'
functionData = {'run':run,
                    'preProcessor':preProcessor,
                    'satelliteSim':satelliteSim,
                    'inputOutputSize':inputOutputSize,
                    'nTest':1000}
parameters={'nHidden': [1],
                    'layerSize':[980],
                    'nTraining': [1500],
                    'learningRate':[0.001,0.0005,0.00025,0.000125,0.0000625]}
nntc.TrainModel(maxEpochs=1e3,
                    lossLogInterval=10,
                    testEvaluationInterval=10,
                    learningRate=learningRate,)


Exp 05
input:
    overlap 0
    rawData-2500-1250-0.004-12N03.npy
    resameled 0.5
    n01-z
    scale , auto: array([8.64232908])
    ->
    exp02-Z-0.05-12s-N03.npy

    run='R1'
    outFileName = f'exp05-{run}'
    functionData = {'run':run,
                    'preProcessor':preProcessor,
                    'satelliteSim':satelliteSim,
                    'inputOutputSize':inputOutputSize,
                    'nTest':1000}
parameters={'nHidden': [1,3],
                'layerSize':list(np.round(np.array((0.5,1,1.5)) * 98 * 12)),
                'nTraining': [2000,4000],
                'cnt':[0,1,2,3,4]}
nntc.TrainModel(maxEpochs=1e3,
                    lossLogInterval=10,
                    testEvaluationInterval=10,
                    learningRate=0.0001,)